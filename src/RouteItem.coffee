fs = require 'fs-extra'
path = require 'path'
{_} = require 'lodash'
class RouteItem
  _route_item:
    name: ''
    file_type: 'pug'
    query_method:''
    route_file: ''
    template_file: ''
    route: ''
  constructor:(params)->
    @_route_item.name           = _.camelCase params.name
    @_route_item.file_type      = 'pug'
    @_route_item.query_method   = if (params.name is 'index') then 'find' else 'findOne'
    @_route_item.route_file     = "#{path.join RouteItem.ROUTES_PATH, params.name}"
    @_route_item.template_file  = "#{path.join RouteItem.VIEWS_PATH, params.name}"
    @_route_item.route = RouteItem.formatRoute path.join RouteItem.VIEWS_PATH.replace(/views+/,''), params.name
  save:(callback)->
    throw 'callback required' unless callback? and typeof callback is 'function'
    fs.ensureDir path.dirname( p = @_route_item.route_file ), (e)=>
      return callback.apply @, arguments if e?
      fs.writeFile "#{p}.js", @template(@_route_item), {flag:'wx+'}, (e)=>
        return callback.apply @, arguments if e?
        fs.writeFile "#{p}.json", JSON.stringify(@_route_item, null, 2), {flag:'wx+'}, (e)=>
          callback.apply @, arguments
RouteItem::template = _.template """
/**
 * <%= name %>.js
 * Route Handler File
 * Generated by Pug-Router for ApiHero
 *
 * REST Route: [<%=query_method%>] '<%=route%>'
 */
module.exports = function(<%= name%>Hander) {
  /*
   * place your customazations below
   */
};
"""
RouteItem.ROUTES_PATH = path.join __dirname, 'routes'
RouteItem.VIEWS_PATH  = path.join __dirname, 'views'
RouteItem.formatRoute = (fname)->
  fname
  # handles index as base path
  .replace /index/, '/'
  # handles all sub-docs as being views on an item
  .replace /^(\/?[a-zA-Z0-9_]{1,}\/+)+(edit|index|show)$/, "$1:id/$2"
  # tidies up any doubled slashes
  .replace /\/\//,'/'
  # removes trailing slash
  .replace /^([a-zA-Z0-9_])+\/+$/, '$1'
RouteItem.create = (name, route_file)->
  new RouteItem 
    name: name, 
    route_file: route_file
module.exports = RouteItem