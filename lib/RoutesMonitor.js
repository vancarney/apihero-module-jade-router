// Generated by CoffeeScript 1.10.0
var AbstractMonitor, RouteManager, RoutesMonitor, _, fs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

_ = require('lodash')._;

AbstractMonitor = require('api-hero').AbstractMonitor;

RoutesMonitor = (function(superClass) {
  extend(RoutesMonitor, superClass);

  RoutesMonitor.prototype.__path = (app_root || '.') + "/views";

  function RoutesMonitor() {
    RoutesMonitor.__super__.constructor.call(this);
    this.__collection.on('collectionChanged', (function(_this) {
      return function(data) {
        return _this.emit('changed', data);
      };
    })(this));
    this.refresh((function(_this) {
      return function(e) {
        return _this.startPolling();
      };
    })(this));
  }

  RoutesMonitor.prototype.handleRoutes = function(routes) {
    var _path, e, error, i, len, list, route, stats;
    list = [];
    for (i = 0, len = routes.length; i < len; i++) {
      route = routes[i];
      _path = route.route_file + ".js";
      try {
        stats = fs.statSync(_path);
      } catch (error) {
        e = error;
        list.push({
          name: route.route_file
        });
        continue;
      }
      if (!(0 <= _.pluck(this.__collection.__list, 'name').indexOf(route.route_file))) {
        this.__collection.__list.push({
          name: route.route_file
        });
      }
    }
    return list;
  };

  RoutesMonitor.prototype.refresh = function(callback) {
    return RouteManager.getInstance().load((function(_this) {
      return function(e, routes) {
        var del, list;
        list = _this.handleRoutes(routes);
        del = _.compact(_.filter(_.compact(_this.getCollection()), function(v) {
          if (typeof v.name === 'undefined') {
            return false;
          }
          return _.pluck(routes, 'route_file').indexOf(v.name) === -1;
        }));
        _.each(del, function(to_remove) {
          return _this.__collection.removeItemAt(_this.getNames().indexOf(to_remove.nam));
        });
        _this.__collection.addAll(list);
        return typeof callback === "function" ? callback(e, list) : void 0;
      };
    })(this));
  };

  RoutesMonitor.prototype.startPolling = function() {
    return this.__iVal != null ? this.__iVal : this.__iVal = fs.watch(this.__path, (function(_this) {
      return function() {
        return _this.refresh();
      };
    })(this));
  };

  return RoutesMonitor;

})(AbstractMonitor);

module.exports = RoutesMonitor;

RouteManager = require('./RouteManager');
