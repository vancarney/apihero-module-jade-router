// Generated by CoffeeScript 1.9.3
var RouteManager, RoutesMonitor, _, _defaults, fs, jade, loadHelpers, modRewrite, path;

fs = require('fs');

path = require('path');

_ = require('lodash');

jade = require('apihero-module-jade');

modRewrite = require('connect-modrewrite');

module.exports.jade = {};

_.each(jade, (function(_this) {
  return function(fun, param) {
    return module.exports.jade[param] = fun;
  };
})(this));

_defaults = {
  viewsPath: path.join("" + (app_root || process.cwd()), 'views'),
  routesPath: path.join("" + (app_root || process.cwd()), 'routes'),
  helpersPath: path.join("" + (app_root || process.cwd()), 'helpers')
};

({
  initXHR: function() {
    return app.use(function(req, res, next) {
      if (typeof (res.locals != null) !== 'object') {
        res.locals = {};
        res.locals.isXHR = req.headers.hasOwnProperty('x-requested-with') && req.headers['x-requested-with'] === 'XMLHttpRequest';
        return next();
      }
    });
  }
});

loadHelpers = function(callback) {
  var handleFile;
  handleFile = function(path, cB) {
    return fs.stat(path, (function(_this) {
      return function(e, stat) {
        var r;
        if (stat.isFile()) {
          try {
            r = require(path);
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
          _.extend(helpers, r);
          return typeof cB === "function" ? cB(null) : void 0;
        } else {
          return typeof cB === "function" ? cB(null) : void 0;
        }
      };
    })(this));
  };
  return fs.readdir(this.options.helpersPath, (function(_this) {
    return function(e, files) {
      var done;
      done = _.after(files.length, function() {
        return callback(null);
      });
      return _.each(files, function(file) {
        return handleFile(path.join(app_root, 'helpers', file), done);
      });
    };
  })(this));
};

module.exports.init = function(app, options, callback) {
  var _routes, rules_path, views;
  this.options = _.extend(_defaults, options);
  views = [this.options.viewsPath];
  rules_path = path.join(this.options.routesPath, 'rewrite-rules.json');
  _routes = [];
  return app.once('ahero-modules-loaded', (function(_this) {
    return function() {
      var _routeManager, done, idx, loadedModules;
      loadedModules = app.ApiHero.listModules();
      if (0 <= (idx = loadedModules.indexOf(path.basename(module.id, '.js')))) {
        loadedModules.splice(idx, 1);
      }
      done = _.after(loadedModules.length, function() {
        app.engine('jade', jade.jade.renderFile);
        app.set('view engine', 'jade');
        app.set('views', views);
        return fs.stat(rules_path, function(e) {
          var rules;
          rules = [];
          if (e == null) {
            try {
              rules = require(rules_path);
            } catch (_error) {
              e = _error;
              console.log(e);
            }
            app.use(modRewrite(rules));
          }
          return callback(null, views);
        });
      });
      _routeManager = RouteManager.getInstance().on('initialized', function(routes) {
        var generateRoute;
        _routes = routes;
        generateRoute = function(route) {
          return _routeManager.createRoute(route, function(e) {
            if ((e != null) && e.code !== 'EEXIST') {
              return console.log(e);
            }
            return setTimeout((function() {
              (require("" + route.route_file)).init(app);
              return done();
            }), 1300);
          });
        };
        _.each(routes, function(route) {
          return generateRoute(route);
        });
        return app.ApiHero.createSyncInstance('route', RoutesMonitor).addSyncHandler('route', 'added', function(op) {
          return _routeManager.load(function(e, r) {
            var ref, route;
            if ((ref = (route = _.where(r, {
              route_file: op.name
            }))) != null ? ref.length : void 0) {
              return generateRoute(route[0]);
            }
          });
        }).addSyncHandler('route', 'removed', function(op) {
          return fs.unlink(op.name + ".js", function(e) {
            if (e != null) {
              return console.log(e);
            }
          });
        });
      });
      return done();
    };
  })(this));
};

RouteManager = require('./RouteManager');

RoutesMonitor = require('./RoutesMonitor');
